if(x_label == "none"){
gg <- gg + theme(axis.title.x=element_blank())
}else{
gg <- gg + xlab(x_label)}
if(flip_horizontal == TRUE){
gg <- gg + coord_flip() +
theme(legend.position="bottom")
gg <- gg + theme(axis.title.x = element_text())
if(x_label == "none"){
gg <- gg + theme(axis.title.y=element_blank())
}else{
gg <- gg + ylab(x_label)
}
}
gg
return(gg)
}
ggplot_the_effects <- function(fit,
fit_pairs,
contrast_rows = "all",
show_p = TRUE,
effect_label = "Effect (units)"){
if(contrast_rows == "all"){
contrast_rows <- 1:nrow(fit_pairs)
}
fit_pairs_dt <- effects_table(fit_pairs[contrast_rows,])
fit_pairs_dt[, contrast := fct_rev(contrast)]
if("ratio" %in% names(fit_pairs)){
nill_null <- 1.0
}else{
nill_null <- 0.0
}
neg_space <- 0.4
p <- nrow(fit_pairs_dt)
min_bound <- min(fit_pairs_dt[, lower.CL])
max_bound <- max(fit_pairs_dt[, upper.CL])
x_lo <- min_bound - 0.1*abs(min_bound)
x_hi <- max_bound + 0.1*abs(max_bound)
if(x_lo > -neg_space*x_hi){
x_lo <- -neg_space*x_hi
}
if(x_hi < -neg_space*x_lo){
x_hi <- -neg_space*x_lo
}
x_lims <- c(x_lo, x_hi)
gg <- ggplot(data = fit_pairs_dt,
aes(y = contrast,
x = estimate)) +
geom_errorbar(aes(xmin=lower.CL,
xmax=upper.CL),
width=0,
color="black") +
geom_point(size = 3) +
geom_vline(xintercept = nill_null, linetype = 2) +
theme_pubr() +
xlab(effect_label) +
theme(axis.title.y = element_blank()) +
coord_cartesian(xlim = x_lims) +
scale_x_continuous(position="top") +
NULL
if(show_p == TRUE){
gg <- gg +
# p-values
annotate(geom = "text",
label = fit_pairs_dt[, p],
x = fit_pairs_dt[, upper.CL] + (x_hi - x_lo)/100,
y = p:1,
size = 2.5,
hjust = 0)
}
gg
return(gg)
}
ggplot_the_model <- function(fit,
fit_emm,
fit_pairs,
x_label = "none",
y_label = "Response (units)",
g_label = NULL,
effect_label = "Effect (units)",
dots = "sina",
dodge_width = 0.8,
adjust = 0.5,
contrast_rows = "all",
show_p = TRUE,
p_pos = NULL,
palette = pal_okabe_ito,
legend_position = "bottom",
flip_horizontal = TRUE,
rel_heights = c(1,1),
group_lines = FALSE){
gg1 <- ggplot_the_response(fit=fit,
fit_emm=fit_emm,
fit_pairs=fit_pairs,
x_label=x_label,
y_label=y_label,
g_label=g_label,
dots = dots,
dodge_width = dodge_width,
adjust = adjust,
contrast_rows = "none",
p_pos = p_pos,
palette = palette,
legend_position = legend_position,
flip_horizontal = flip_horizontal,
group_lines = group_lines)
gg2 <- ggplot_the_effects(fit,
fit_pairs,
contrast_rows,
show_p,
effect_label)
plot_grid(gg2,
gg1,
nrow=2,
align = "v",
axis = "lr",
rel_heights = rel_heights)
}
knitr::opts_chunk$set(echo = TRUE)
library(insight)
pal_okabe_ito <- c(
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7"
)
pal_okabe_ito_blue <- pal_okabe_ito[c(5,6,1,2,3,7,4)]
pal_okabe_ito_red <- pal_okabe_ito[c(6,5,3,1,2,7,4)]
pal_okabe_ito_2 <- pal_okabe_ito[c(5,6)]
pal_okabe_ito_3 <- pal_okabe_ito[c(5,6,7)]
pal_okabe_ito_3_light <- pal_okabe_ito[c(1,2,7)]
pal_okabe_ito_4 <- pal_okabe_ito[c(5,6,7,2)]
effects_table <- function(fit_pairs){
if(is.data.frame(fit_pairs) == TRUE){
pairs_dt <- data.table(fit_pairs)
}else{
pairs_dt <- summary(fit_pairs) %>%
data.table()
}
if("ratio" %in% colnames(pairs_dt)){
# if the lm with log(y) or glm with log link, use " / "
groups <- unlist(str_split(pairs_dt$contrast, " / "))
setnames(pairs_dt, old = "ratio", new = "estimate")
}else{
# if lm use " - "
groups <- unlist(str_split(pairs_dt$contrast, " - "))
}
# add the group1 and group 2 columns
pairs_dt[, group1 := groups[odd(1:length(groups))]]
pairs_dt[, group2 := groups[even(1:length(groups))]]
# match for simple and remove parentheses if they exist
if(names(pairs_dt)[1] != "contrast"){
x_col <- names(pairs_dt)[2]
g_col <- names(pairs_dt)[1]
x_col_levels <- unique(pairs_dt[, get(x_col)])
x_col_levels <- x_col_levels[x_col_levels != "."]
g_col_levels <- unique(pairs_dt[, get(g_col)])
g_col_levels <- g_col_levels[g_col_levels != "."]
repair <- pairs_dt[, group1] %in% c(x_col_levels, g_col_levels)
pairs_dt[, group1 := ifelse(repair,
group1,
gsub(")", "", group1, fixed = TRUE))]
pairs_dt[, group1 := ifelse(repair,
group1,
gsub("(", "", group1, fixed = TRUE))]
repair <- pairs_dt[, group2] %in% c(x_col_levels, g_col_levels)
pairs_dt[, group2 := ifelse(repair,
group2,
gsub(")", "", group2, fixed = TRUE))]
pairs_dt[, group2 := ifelse(repair,
group2,
gsub("(", "", group2, fixed = TRUE))]
}
if("asymp.LCL" %in% colnames(pairs_dt)){
# if the lm with log(y) or glm with log link, use " / "
setnames(pairs_dt,
old = c("asymp.LCL", "asymp.UCL"),
new = c("lower.CL", "upper.CL"))
}
# for simple = each,
if(which(colnames(pairs_dt)=="contrast") == 3){
# replace "." with blank
pairs_dt[get(g_col) == ".",
(1) := ""]
pairs_dt[get(x_col) == ".",
(2) := ""]
# beautify contrast column and group1, group2
pairs_dt[, contrast := paste0(get(names(pairs_dt)[1]),
get(names(pairs_dt)[2]),
": ",
contrast)]
pairs_dt[get(g_col) == "",
group1 := paste0(get(names(pairs_dt)[1]),
get(names(pairs_dt)[2]),
",",
group1)]
pairs_dt[get(g_col) == "",
group2 := paste0(get(names(pairs_dt)[1]),
get(names(pairs_dt)[2]),
",",
group2)]
pairs_dt[get(x_col) == "",
group1 := paste0(group1,
",",
get(names(pairs_dt)[1]),
get(names(pairs_dt)[2]))]
pairs_dt[get(x_col) == "",
group2 := paste0(group2,
",",
get(names(pairs_dt)[1]),
get(names(pairs_dt)[2]))]
}
# create a column of nicely formatted p-values for display.
pairs_dt[, p := pvalString(p.value)]
pairs_dt[, contrast := factor(contrast, contrast)]
return(pairs_dt)
}
ggplot_the_response <- function(fit, # model fit from lm, lmer, nlme, glmmTMB
fit_emm,
fit_pairs,
wrap_col=NULL,
x_label = "none",
y_label = "Response (units)",
g_label = NULL,
dots = "sina",
dodge_width = 0.8,
adjust = 0.5,
contrast_rows = "all",
p_pos = NULL,
palette = pal_okabe_ito,
legend_position = "top",
flip_horizontal = FALSE,
group_lines = FALSE){
show_contrasts <- contrast_rows
dt <- model.frame(fit) %>% # correctly subsets
data.table()
y_col <- find_response(fit)
fit_emm_dt <- emm_table(fit_emm)
fit_pairs_dt <- effects_table(fit_pairs)
if(which(names(fit_emm_dt) == "emmean") == 2){
x_col <- names(fit_emm_dt)[1]
g_col <- NA
}else{
x_col <- names(fit_emm_dt)[1]
g_col <- names(fit_emm_dt)[2]
}
# if(is.null(x_col)){
#   x_col <- find_predictors(fit)$conditional[1]
# }
# if(is.null(g_col)){
#   g_col <- find_predictors(fit)$conditional[2]
# }
rand_int <- find_random(fit)
if(is.na(g_col) & group_lines==TRUE){
group_lines <- FALSE
}
if(is.factor(dt[, get(x_col)]) == FALSE){
dt[, (x_col) := factor(get(x_col))]
}
if(!is.na(g_col)){
if(is.factor(dt[, get(g_col)]) == FALSE){
dt[, (g_col) := factor(get(g_col))]
}
}
if(is.na(g_col)){
pd <- position_dodge(width = 0)
fit_pairs_dt[, x_min_col := group1]
fit_pairs_dt[, x_max_col := group2]
}else{
pd <- position_dodge(width = dodge_width)
fit_pairs_dt[, x_min_col := NA]
fit_pairs_dt[, x_max_col := NA]
}
if(is.na(g_col)){
color_col <- x_col
}else{
color_col <- g_col
}
gg <- ggplot(data=dt, aes(x = get(x_col),
y = get(y_col),
color = get(color_col)))
# plot points
if(dots == "sina"){
gg <- gg + geom_sina(alpha = 0.5,
position = pd,
adjust = adjust)
}
if(dots == "jitter"){
gg <- gg + geom_point(alpha = 0.5,
position = "jitter")
}
if(dots == "dotplot"){
gg <- gg + geom_dotplot(binaxis='y',
stackdir='center',
alpha = 0.5,
position = pd)
}
# plot means and CI
gg <- gg +
geom_errorbar(data = fit_emm_dt, aes(y = emmean,
ymin = lower.CL,
ymax = upper.CL,
color = get(color_col)),
width = 0,
position = pd
) +
geom_point(data = fit_emm_dt, aes(y = emmean,
color = get(color_col)),
size = 3,
position = pd
) +
# aesthetics
ylab(y_label) +
scale_color_manual(values = palette,
name = color_col) +
theme_pubr() +
theme(legend.position = legend_position) +
NULL
# if(group_lines == TRUE | group_lines == g_col){
#   gg <- gg +
#     geom_line(data = fit_emm_dt,
#               aes(y = emmean,
#                   group = get(g_col)),
#               position = pd)
# }
# if(group_lines == x_col){
#   gg <- gg +
#     geom_line(data = fit_emm_dt,
#               aes(y = emmean,
#                   group = get(x_col)))
# }
if(is.na(g_col)){
gg <- gg + theme(legend.position="none")
}
if(is.null(g_label)){
gg <- gg + guides(color = guide_legend(title=g_col))
}else{
if(g_label == "none"){
gg <- gg + guides(color = guide_legend(title=NULL))
}else{
gg <- gg + guides(color = guide_legend(title=g_label))
}
}
if(is.numeric(show_contrasts)){
contrast_rows <- show_contrasts
}else{
if(show_contrasts == "none"){
contrast_rows <- 0
}
if(show_contrasts == "all"){
contrast_rows <- 1:nrow(fit_pairs_dt)
}
}
if(sum(contrast_rows) > 0){ # show p-values
# get x positions for p-values
# [[3]] is 3rd layer which is means
if(is.na(fit_pairs_dt[1, x_min_col])){
gg_data <- cbind(fit_emm_dt,
ggplot_build(gg)$data[[3]])
gg_data[, cell := paste(get(x_col), get(g_col), sep=",")]
match_it_ref <- match(fit_pairs_dt$group1, gg_data$cell)
fit_pairs_dt[, rowa := match(group1, gg_data$cell)]
fit_pairs_dt[, rowb := match(group2, gg_data$cell)]
fit_pairs_dt[, x_min_col := gg_data[rowa, x]]
fit_pairs_dt[, x_max_col := gg_data[rowb, x]]
}
if(is.null(p_pos)){
p_pos <- 1:length(contrast_rows)
}
max_y <- max(dt[, get(y_col)], na.rm=TRUE)
min_y <- min(dt[, get(y_col)], na.rm=TRUE)
# make sure max includes CIs!
max_y <- max(max_y, fit_emm_dt$upper.CL)
min_y <- min(min_y, fit_emm_dt$lower.CL)
increment <- 0.08*(max_y - min_y)
y_position <- max_y + increment*p_pos
gg <- gg +
stat_pvalue_manual(fit_pairs_dt[contrast_rows],
label = "p",
y.position = y_position,
xmin = "x_min_col",
xmax = "x_max_col",
size = 2.5,
tip.length = 0.01)
# make sure ylim includes p-value
y_hi <- max_y + 0.05*(max_y - min_y) +
increment*max(p_pos)
y_lo <- min_y - 0.05*(max_y - min_y)
gg <- gg + coord_cartesian(ylim = c(y_lo, y_hi))
}
# remove x axis title
if(x_label == "none"){
gg <- gg + theme(axis.title.x=element_blank())
}else{
gg <- gg + xlab(x_label)}
if(flip_horizontal == TRUE){
gg <- gg + coord_flip() +
theme(legend.position="bottom")
gg <- gg + theme(axis.title.x = element_text())
if(x_label == "none"){
gg <- gg + theme(axis.title.y=element_blank())
}else{
gg <- gg + ylab(x_label)
}
}
gg
return(gg)
}
ggplot_the_effects <- function(fit,
fit_pairs,
contrast_rows = "all",
show_p = TRUE,
effect_label = "Effect (units)"){
if(contrast_rows == "all"){
contrast_rows <- 1:nrow(fit_pairs)
}
fit_pairs_dt <- effects_table(fit_pairs[contrast_rows,])
fit_pairs_dt[, contrast := fct_rev(contrast)]
if("ratio" %in% names(fit_pairs)){
nill_null <- 1.0
}else{
nill_null <- 0.0
}
neg_space <- 0.4
p <- nrow(fit_pairs_dt)
min_bound <- min(fit_pairs_dt[, lower.CL])
max_bound <- max(fit_pairs_dt[, upper.CL])
x_lo <- min_bound - 0.1*abs(min_bound)
x_hi <- max_bound + 0.1*abs(max_bound)
if(x_lo > -neg_space*x_hi){
x_lo <- -neg_space*x_hi
}
if(x_hi < -neg_space*x_lo){
x_hi <- -neg_space*x_lo
}
x_lims <- c(x_lo, x_hi)
gg <- ggplot(data = fit_pairs_dt,
aes(y = contrast,
x = estimate)) +
geom_errorbar(aes(xmin=lower.CL,
xmax=upper.CL),
width=0,
color="black") +
geom_point(size = 3) +
geom_vline(xintercept = nill_null, linetype = 2) +
theme_pubr() +
xlab(effect_label) +
theme(axis.title.y = element_blank()) +
coord_cartesian(xlim = x_lims) +
scale_x_continuous(position="top") +
NULL
if(show_p == TRUE){
gg <- gg +
# p-values
annotate(geom = "text",
label = fit_pairs_dt[, p],
x = fit_pairs_dt[, upper.CL] + (x_hi - x_lo)/100,
y = p:1,
size = 2.5,
hjust = 0)
}
gg
return(gg)
}
ggplot_the_model <- function(fit,
fit_emm,
fit_pairs,
x_label = "none",
y_label = "Response (units)",
g_label = NULL,
effect_label = "Effect (units)",
dots = "sina",
dodge_width = 0.8,
adjust = 0.5,
contrast_rows = "all",
show_p = TRUE,
p_pos = NULL,
palette = pal_okabe_ito,
legend_position = "bottom",
flip_horizontal = TRUE,
rel_heights = c(1,1),
group_lines = FALSE){
gg1 <- ggplot_the_response(fit=fit,
fit_emm=fit_emm,
fit_pairs=fit_pairs,
x_label=x_label,
y_label=y_label,
g_label=g_label,
dots = dots,
dodge_width = dodge_width,
adjust = adjust,
contrast_rows = "none",
p_pos = p_pos,
palette = palette,
legend_position = legend_position,
flip_horizontal = flip_horizontal,
group_lines = group_lines)
gg2 <- ggplot_the_effects(fit,
fit_pairs,
contrast_rows,
show_p,
effect_label)
plot_grid(gg2,
gg1,
nrow=2,
align = "v",
axis = "lr",
rel_heights = rel_heights)
}
